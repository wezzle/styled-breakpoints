{"version":3,"file":"styled-breakpoints.umd.js","sources":["../src/helpers.js","../src/index.js"],"sourcesContent":["const BROWSER_DEFAULT_FONT_SIZE = 16;\nexport const pixelsToEm = inPx =>\n  `${parseFloat(inPx) / BROWSER_DEFAULT_FONT_SIZE}em`;\n\nconst getNextBreakName = (breakpointValue, breakpoints) => {\n  const namesOfBreakpoins = Object.keys(breakpoints);\n  const penultimateBreakName = namesOfBreakpoins[namesOfBreakpoins.length - 2];\n  const currentPosition = namesOfBreakpoins.indexOf(breakpointValue);\n\n  try {\n    if (currentPosition < namesOfBreakpoins.length - 1) {\n      const nextBreak = currentPosition + 1;\n      return namesOfBreakpoins[`${nextBreak}`];\n    }\n    throw new Error(\n      `\"styled-breakpoints: ${breakpointValue}\" is incorrect value. Use ${penultimateBreakName}.`,\n    );\n  } catch (err) {\n    console.warn(err);\n  }\n};\n\nexport const getNextBreakValue = (breakpointValue, breakpoints = {}) => {\n  let result = null;\n\n  try {\n    const breakName = getNextBreakName(breakpointValue, breakpoints);\n    if (breakpoints[breakpointValue]) {\n      result = `${parseFloat(breakpoints[breakName]) - 0.02}px`;\n    } else if (parseInt(breakpointValue, 10)) {\n      result = `${Number(breakpointValue) - 0.02}`;\n    } else {\n      throw new Error(\n        `styled-breakpoints: ${breakpointValue} no valid breakpoint or size specified for media.`,\n      );\n    }\n  } catch (err) {\n    console.warn(err);\n  }\n\n  return result;\n};\n\nexport const getBreakValue = (breakpointValue, breakpoints = {}) => {\n  let result = null;\n\n  try {\n    if (breakpoints[breakpointValue]) {\n      result = breakpoints[breakpointValue];\n    } else if (parseInt(breakpointValue, 10)) {\n      result = breakpointValue;\n    } else {\n      throw new Error(\n        'styled-breakpoints: No valid breakpoint or size specified for media.',\n      );\n    }\n  } catch (err) {\n    console.warn(err);\n  }\n\n  return result;\n};\n","import { pixelsToEm, getNextBreakValue, getBreakValue } from './helpers';\n\n/**\n * Default media breakpoints\n * @type {Object}\n */\nexport const defaultBreakpoints = {\n  tablet: '768px',\n  desktop: '992px',\n  lgDesktop: '1200px',\n};\n\nconst createAbove = breakpointsMap => breakpointKey => {\n  const ems = pixelsToEm(getBreakValue(breakpointKey, breakpointsMap));\n  return `@media screen and (min-width: ${ems})`;\n};\n\nconst createBelow = breakpointsMap => breakpointKey => {\n  const ems = pixelsToEm(getBreakValue(breakpointKey, breakpointsMap));\n  return `@media screen and (max-width: ${ems})`;\n};\n\nconst createBetween = breakpointsMap => (fromBp, toBp) => {\n  const minEms = pixelsToEm(getBreakValue(fromBp, breakpointsMap));\n  const maxEms = pixelsToEm(getNextBreakValue(toBp, breakpointsMap));\n  return `@media screen and (min-width: ${minEms}) and (max-width: ${maxEms})`;\n};\n\nconst createOnly = breakpointsMap => breakpointKey => {\n  const minEms = pixelsToEm(getBreakValue(breakpointKey, breakpointsMap));\n  const maxEms = pixelsToEm(getNextBreakValue(breakpointKey, breakpointsMap));\n  return `@media screen and (min-width: ${minEms}) and (max-width: ${maxEms})`;\n};\n\n/**\n * Media query generator\n * @param {Object} breakpoints - Map labels to breakpoint sizes\n * @return {Object} - Media generators for each breakpoint\n */\nexport const createBreakpoints = (breakpoints = defaultBreakpoints) => {\n  const above = createAbove(breakpoints);\n  const below = createBelow(breakpoints);\n  const between = createBetween(breakpoints);\n  const only = createOnly(breakpoints);\n\n  return { above, below, between, only };\n};\n\n/**\n * Media object with default breakpoints\n * @return {object} - Media generators for each size\n */\nexport const { above, below, between, only } = createBreakpoints();\n"],"names":["pixelsToEm","inPx","parseFloat","getNextBreakValue","breakpointValue","breakpoints","result","breakName","namesOfBreakpoins","Object","keys","penultimateBreakName","length","currentPosition","indexOf","Error","err","console","warn","getNextBreakName","parseInt","Number","getBreakValue","defaultBreakpoints","tablet","desktop","lgDesktop","createBreakpoints","breakpointsMap","above","breakpointKey","below","between","fromBp","toBp","only"],"mappings":"wMAAA,IACaA,EAAa,SAAAC,UACrBC,WAAWD,GAFkB,SAsBrBE,EAAoB,SAACC,EAAiBC,YAAAA,IAAAA,EAAc,QAC3DC,EAAS,aAGLC,EAtBe,SAACH,EAAiBC,OACnCG,EAAoBC,OAAOC,KAAKL,GAChCM,EAAuBH,EAAkBA,EAAkBI,OAAS,GACpEC,EAAkBL,EAAkBM,QAAQV,UAG5CS,EAAkBL,EAAkBI,OAAS,SAExCJ,MADWK,EAAkB,UAGhC,IAAIE,8BACgBX,+BAA4CO,OAEtE,MAAOK,GACPC,QAAQC,KAAKF,IAQKG,CAAiBf,EAAiBC,MAChDA,EAAYD,GACdE,EAAYJ,WAAWG,EAAYE,IAAc,aAC5C,CAAA,IAAIa,SAAShB,EAAiB,UAG7B,IAAIW,6BACeX,uDAHzBE,MAAYe,OAAOjB,GAAmB,MAMxC,MAAOY,GACPC,QAAQC,KAAKF,UAGRV,GAGIgB,EAAgB,SAAClB,EAAiBC,YAAAA,IAAAA,EAAc,QACvDC,EAAS,YAGPD,EAAYD,GACdE,EAASD,EAAYD,OAChB,CAAA,IAAIgB,SAAShB,EAAiB,UAG7B,IAAIW,MACR,wEAHFT,EAASF,GAMX,MAAOY,GACPC,QAAQC,KAAKF,UAGRV,GCtDIiB,EAAqB,CAChCC,OAAQ,QACRC,QAAS,QACTC,UAAW,UA8BAC,EAAoB,SAACtB,OA3BduB,EAKAA,EAKEA,EAMHA,kBAWevB,IAAAA,EAAckB,GAMvC,CAAEM,OAjCSD,EA4BQvB,EA5BU,SAAAyB,0CACxB9B,EAAWsB,EAAcQ,EAAeF,UAgCpCG,OA5BEH,EAwBQvB,EAxBU,SAAAyB,0CACxB9B,EAAWsB,EAAcQ,EAAeF,UA2B7BI,SAvBHJ,EAoBUvB,EApBQ,SAAC4B,EAAQC,0CAChClC,EAAWsB,EAAcW,EAAQL,yBACjC5B,EAAWG,EAAkB+B,EAAMN,UAqBlBO,MAjBfP,EAeOvB,EAfW,SAAAyB,0CACpB9B,EAAWsB,EAAcQ,EAAeF,yBACxC5B,EAAWG,EAAkB2B,EAAeF,cAsBdD,IAAhCE,IAAAA,MAAOE,IAAAA,MAAOC,IAAAA,QAASG,IAAAA"}